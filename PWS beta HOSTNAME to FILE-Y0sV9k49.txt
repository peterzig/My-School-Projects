#define _WINSOCK_DEPRECATED_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS

#include <WinSock2.h>
#include <stdio.h>

#pragma comment(lib,"ws2_32.lib")

FILE *plik = fopen("IP_LIST.txt", "a");

int main(int argc, char **argv)
{
	int i = 0;
	//-----------------------------------------
	// Declare and initialize variables
	WSADATA wsaData;
	int iResult; // error code

	DWORD dwError;

	struct hostent *remoteHost;
	char *host_name;
	struct in_addr addr;

	// Initialize Winsock
	iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
	if (iResult != 0)
	{
		printf("WSAStartup failed: %d\n", iResult);
		getchar();
		return 1;
	}

	char buff[64];
	printf("Podaj adres strony: ");
	scanf(" %s", &buff);
	
	host_name = buff;


	printf("Calling gethostbyname with %s\n", host_name);
	remoteHost = gethostbyname(host_name);
	

	if (remoteHost == NULL)
	{
		dwError = WSAGetLastError();
		if (dwError != 0) {
			if (dwError == WSAHOST_NOT_FOUND) {
				printf("Host not found\n");
				return 1;
			}
			else if (dwError == WSANO_DATA) {
				printf("No data record found\n");
				return 1;
			}
			else {
				printf("Function failed with error: %ld\n", dwError);
				return 1;
			}
		}
	}
	else
	{
		printf("Function returned:\n");
		printf("\tOfficial name: %s\n", remoteHost->h_name);
		printf("\tAlternate names: %s\n", remoteHost->h_aliases);
		printf("\tAddress type: ");
		switch (remoteHost->h_addrtype) {
		case AF_INET:
			printf("AF_INET\n");
			
			while (remoteHost->h_addr_list[i]) {
				if (remoteHost->h_addrtype == AF_INET) {
					printf("\t\tIP Address #%d %s\n", i, inet_ntoa(*(in_addr*)remoteHost->h_addr_list[i++]));
					if (plik != NULL || !feof(plik)) {
						fprintf(plik, "IP Address #%d %s\n", i, inet_ntoa(*(in_addr*)remoteHost->h_addr_list[i]));

					//fputs(inet_ntoa(*(in_addr*)remoteHost->h_addr_list[i]), plik); /* zapisz nasz łańcuch w pliku */
					}
				}
				fclose(plik);
			}	
			
			break;
		case AF_INET6:
			printf("AF_INET\n");
			break;
		case AF_NETBIOS:
			printf("AF_NETBIOS\n");
			break;
		default:
			printf(" %d\n", remoteHost->h_addrtype);
			break;
		}
		printf("\tAddress length: %d\n", remoteHost->h_length);
		getchar();
	}
	getchar();
	return 0;
}